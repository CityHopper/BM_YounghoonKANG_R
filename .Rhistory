df %>%
filter(class == 1) %>%
select(science)
#arrange() 정렬
df %>% arrange(science)
df.sort <- df %>%
mutate(total = math + english + science,
average = (math + english + science)/3 ) %>%
arrange(desc(average)) ; df.sort
#summarise(): 집단별 요약
#group_by(): 집단별 나누기
df %>% summarise(mean_math = mean(math))
df %>%
group_by (class) %>%
summarise(mean_math = mean(math),
mean_english = mean(english),
mean_science= mean(science),
n = n())
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
ds
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
ds_na <- function(y){
return (sum(is.na(y)))
}
na_count <- apply(ds,2,ds_na)
na_count
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
na_countr <- apply(ds,1,ds_na)
na_countr
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
na_countr <- apply(ds,1,ds_na)
na_countr
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
na_countr <- apply(ds,1,ds_na)
na_countr
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
na_countr <- apply(ds,1,ds_na)
na_countr
na_countr[na_countr > 0,]
na_countr[na_countr > 0]
x[ !complete.cases(x), ] #NA가 포함 된 행 출력: complete가 아닌!
na_count[ !compelte.cases(na_count)]
na_count[ !compelte.cases(na_count),]
na_count[ !complete.cases(na_count),]
x[ !complete.cases(x), ] #NA가 포함 된 행 출력: complete가 아닌!
na_count
ds[ !complete.cases(ds),]
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum(rowSums(is.na(ds))>0)
rowSums(is.na(ds))
sum(rowSums(is.na(ds)))
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum(rowSums(is.na(ds))>0)
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
ds[ !complete.cases(ds),]
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
ds[ !complete.cases(ds),]
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum(rowSums(is.na(ds))>0)
sum(rowSums(is.na(ds)))
#Matrix/DataFrame의 행(data)별 결측치 확인
rowSums(is.na(x))
sum(rowSum(is.na(x))>0)
sum(rowSums(is.na(x))>0)
sum(is.na(x))
sum(rowSums(is.na(ds))>0)
# (4) 결측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
ds.new <- ds[complete.cases(ds),]; ds.new
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
sr <- data.frame(state.x77)
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
ds <- state.x77
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
for (i in 1:ncol(st)){
if (boxplot.stats(st$i)$out > 0){
st$i[st$i %in% out.val] <- NA
}
}
ncol(st)
st$1
st[,1]
st[,2]
st[,3]
st[,4]
boxplot.stats(st[,i])$out
for (i in 1:ncol(st)){
if (boxplot.stats(st[,i])$out > 0){
st[,i][st[,i] %in% out.val] <- NA
}
}
if (boxplot.stats(st[,i])$out >= 1){
st[,i][st[,i] %in% out.val] <- NA
}
out.val <- boxplot.stats(st$Income)$out; out.val
#특이값, 이상치 처리: NA로 변환 후 결측치 처리방법 이용
head(st)
out.val <- boxplot.stats(st$Income)$out; out.val
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
boxplot.stats(st[,1])$out
boxplot.stats(st[,2])$out
boxplot.stats(st[,3])$out
boxplot.stats(st[,4])$out
boxplot.stats(st[,5])$out
boxplot.stats(st[,6])$out
boxplot.stats(st[,7])$out
boxplot.stats(st[,8])$out
boxplot.stats(st[,9])$out
st
boxplot.stats(st$Income)$out
#특이값, 이상치 처리: NA로 변환 후 결측치 처리방법 이용
head(st)
out.val <- boxplot.stats(st$Income)$out; out.val
print(i)
for (i in 1:ncol(st)){
print(i)
}
#특이값, 이상치 처리: NA로 변환 후 결측치 처리방법 이용
head(st)
out.val <- boxplot.stats(st$Income)$out; out.val
st$Income[st$Income %in% out.val] <- NA # %in% : 벡터 내 특정값 포함 여부 확인 연산자
head(st)
#특이값, 이상치 처리: NA로 변환 후 결측치 처리방법 이용
head(st)
#특이값, 이상치
st <- data.frame(state.x77)
summary(st$Income)
boxplot(st$Income)
#특이값, 이상치
st <- data.frame(state.x77)
summary(st$Income)
boxplot(st$Income)
boxplot.stats(st$Income)$out
#특이값, 이상치 처리: NA로 변환 후 결측치 처리방법 이용
head(st)
out.val <- boxplot.stats(st$Income)$out; out.val
st$Income[st$Income %in% out.val] <- NA # %in% : 벡터 내 특정값 포함 여부 확인 연산자
head(st)
out.val <- boxplot.stats(st[,i])$out
st
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
out.val <- boxplot.stats(st$Area)$out; out.val
for (i in 1:ncol(st)){
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val]
}
st
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
for (i in 1:ncol(st)){
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val]
}
st
out.val <- boxplot.stats(st[,i])$out
st
out.val <- boxplot.stats(st[,8])$out
st[,8][st[,8] %in% out.val] <- NA
st
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for (i in 1:ncol(st)){
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val] <- NA
}
st
# 문2)다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기위한 R 코드를 작성하시오.
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for (i in 1:ncol(st)){
out.val <- boxplot.stats(st[,i])$out
st[,i][st[,i] %in% out.val] <- NA
}
st
#(3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[complete.cases(st),];
#(3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[complete.cases(st),]; st2
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
AQ
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(in.na(AQ))
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
aqcount <- apply(AQ,2,ds_na); aqcount
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
colSums(is.na(AQ))
aqcount <- apply(AQ,2,ds_na); aqcount
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
nona <- AQ[complete.cases(AQ),]; nona
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
AQ
print(i)
AQ
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
for (i in 1:ncol(AQ)){
print(i)
}
AQ
mean(AQ[,1])
mean(AQ[,i],na.rm = TRUE)
mean(AQ[,1],na.rm = TRUE)
mean(AQ[,2],na.rm = TRUE)
mean(AQ[,3],na.rm = TRUE)
mean(AQ[,4],na.rm = TRUE)
mean(AQ[,5],na.rm = TRUE)
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
colSums(is.na(AQ))
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
AQ
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
colSums(is.na(AQ))
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
nona <- AQ[complete.cases(AQ),]; nona
AQ[,i][is.na(AQ[,i])] <- mean(AQ[,i],na.rm = TRUE)
AQ
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
for (i in 1:ncol(AQ)){
AQ[,i][is.na(AQ[,i])] <- mean(AQ[,i],na.rm = TRUE)
}
AQ
uality를 AQ에 저장하시오.
AQ <- airquality
AQ
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
colSums(is.na(AQ))
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
nona <- AQ[complete.cases(AQ),]; nona
#(5) AQ에서 NA를 NA가 속한
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
AQ
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
AQ2 <- for (i in 1:ncol(AQ)){
AQ[,i][is.na(AQ[,i])] <- mean(AQ[,i],na.rm = TRUE)
}
AQ2
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
AQ
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
AQ2 <- AQ
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
AQ2 <- AQ; AQ2
for (i in 1:ncol(AQ2)){
AQ2[,i][is.na(AQ2[,i])] <- mean(AQ2[,i],na.rm = TRUE)
}
AQ2
#(1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
library(dplyr)
state.x77 %>% arrange
class(state.x77)
usa <- data.frame(state.x77)
usa
usa %>% arrange
usa %>% arrange(Population)
usa %>% arrange(Population)
#(2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
usa %>% arrange(desc(Income))
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
usa %>% arrange(Illiteracy)
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
usa %>% arrange(Illiteracy) %>%
head(10)
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
usa %>% arrange(Illiteracy) %>% select(Illiteracy)
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
usa %>% arrange(Illiteracy) %>% select(Illiteracy) %>%
head(10)
usa
#데이터 집계
agg <- aggregate (iris[ , -5], #5번열 제외하고 품종별로 평균값 집계
by = list(iris$Species),
FUN = mean)
agg
usa[order(usa$Illiteracy, decreasing = T),]
usa[order(usa$Illiteracy, decreasing = F),]
head(usail, 10)
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
usail <- usa[order(usa$Illiteracy, decreasing = F),]
head(usail 10)
head(usail, 10)
head(usail[,"Illiteracy"], 10)
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
usail <- usa[order(usa$Illiteracy, decreasing = F),]
head(usail[,"Illiteracy"], 10)
iris[order(iris$Species, decreasing = T,
iris$Sepal.Length),] #정렬 기준을 2개 설정 - 품종 먼저. 그다음 길이
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
#데이터 분리
sp <- split(iris, iris$Species)
sp
sp
summary(sp)
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
#데이터 분리
sp <- split(iris, iris$Species)
sp
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
mt.gear$`3`
mt.gear$`4`
#(3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서 mt.gear.35에 저장하고 내용을 출력하시오.
mt.gear.35 <- rbind(mt.gear$`3`, mt.gear$`5`)
mt.gear.35
#(4) mtcars 데이터셋에서 wt(중량)가 1.5~3.0 사이인 행들을 추출하여 출력하시오.
mtcars %>% filter(1.5 < mtcars$wt < 3.0)
#(4) mtcars 데이터셋에서 wt(중량)가 1.5~3.0 사이인 행들을 추출하여 출력하시오.
mtcars %>% filter(mtcars$wt < 3.0 & mtcars$wt > 1.5)
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
authors;
authors; books
authors; books
authors;
books
#데이터 병합 merge
x <- data.frame(name = c("a","b","c"), #x와 y 모두 name이란 변수가 있음
mat = c(90, 80, 40))
y <- data.frame(name = c("a","b","d"),
korean = c(75,60,90))
merge(x,y) # 교집합만
merge(x,y, all.x = T) # x 기준
merge(x,y, all.y = T) # y 기준
merge(x,y, all = T) # 모두 병합
x <- data.frame(name = c("a","b","c"), #x와 y 모두 name이란 변수가 있음
mat = c(90, 80, 40))
y <- data.frame(sname = c("a","b","d"),
korean = c(75,60,90))
y <- data.frame(sname = c("a","b","d"),
korean = c(75,60,90)); x;y;
merge(x,y, by.x = c("name"),
by.y = c("sname"))
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(x=authors,y=books, by.x = c("surname"),
by.y = c("name"))
authors;
books
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(x=authors,y=books, by.x = c("surname"),
by.y = c("name"))
merge(x=authors,y=books, all.x = T,
by.x = c("surname"),
by.y = c("name"))
merge(x=authors,y=books, all.y = T,
by.x = c("surname"),
by.y = c("name"))
merge(x=authors,y=books, all = T,
by.x = c("surname"),
by.y = c("name"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(x=authors,y=other.author)
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(x=authors,y=other.author,
by.x = c("surname"),
by.y = c("name"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(authors,other.author,
by.x = c("surname"),
by.y = c("other.author"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(x=authors, y=other.author,
by.x = c("surname"),
by.y = c("other.author"))
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge(x=authors,y=books, all.y = T,
by.x = c("surname"),
by.y = c("name"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(x=authors, y=other.author, all = T,
by.x = c("surname"),
by.y = c("other.author"))
x <- data.frame(name = c("a","b","c"), #x와 y 모두 name이란 변수가 있음
mat = c(90, 80, 40))
y <- data.frame(sname = c("a","b","d"),
korean = c(75,60,90)); x;y;
merge(x,y, by.x = c("name"),
by.y = c("sname"))
authors;
books
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(x=authors, y=books,
by.x = c("surname"),
by.y = c("other.author"))
authors;
books
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge(x=authors,y=books,
by.x = c("surname"),
by.y = c("name"))
#(2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
merge(x=authors,y=books, all.x = T,
by.x = c("surname"),
by.y = c("name"))
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge(x=authors,y=books, all.y = T,
by.x = c("surname"),
by.y = c("name"))
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge(x=authors, y=books,
by.x = c("surname"),
by.y = c("other.author"))
usa <- data.frame(state.x77)
usa %>% arrange(Population)
#(2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
usa %>% arrange(desc(Income))
usa %>% arrange(Illiteracy) %>%
head(10)
usa %>% arrange(Illiteracy) %>%
select(Illiteracy) %>%
head(10)
subset(usa, usa$Illiteracy)
usail <- usa[order(usa$Illiteracy, decreasing = F),]
head(usail[,"Illiteracy"], 10)
#Matrix.Dataframe 정렬
head(iris) #행번호 = 입력순서
order(iris$Sepal.Length)
iris[order(iris$Sepal.Length), ]#Ascending
iris[order(iris$Sepal.Length, decreasing = T),] #Descending
iris.new <- iris[order(iris$Sepal.Length),]
head(iris.new)
usail <- usa %>% arrange(Illiteracy)
usa %>% arrange(Illiteracy)
usa %>% arrange(Illiteracy) %>%
select(Illiteracy)
usail[c(1:10),]
usail <- usa %>% arrange(Illiteracy) %>%
select(Illiteracy)
usail[c(1:10),]
usa[c(1:10),"Illiteracy"]
usa[c(1:10),"Illiteracy"]
# usail <- usa %>% arrange(Illiteracy) %>%
#   select(Illiteracy)
usa[c(1:10),"Illiteracy"]
# usail <- usa %>% arrange(Illiteracy) %>%
#   select(Illiteracy)
usa
usa[order(usa$Illiteracy),]
head(usa[order(usa$Illiteracy),], 10)
usa[order(usa$Illiteracy),]
a <- usa[order(usa$Illiteracy),]
a
a[c(1:10),"Illiteracy"]
a[,"Illiteracy"]
head(usa[order(usa$Illiteracy),],10)
names(head(usa[order(usa$Illiteracy),],10))
names(head(usa[order(usa$Illiteracy),],10))
rownames(head(usa[order(usa$Illiteracy),],10))
head(usa[order(usa$Illiteracy),],10)
rownames(head(usa[order(usa$Illiteracy),],10))
head(usa[order(usa$Illiteracy),],10)
head(usa[order(usa$Illiteracy),],10)[,"Illiteracy"]
install.packages("ggplot2")
str(ggplot2::mpg) # :: 콜론 두 개를 스코프 scope라고 함 - library 함수로 패키지 호출 없이 데이터셋 사용
ggplot2::mpg
mpg <- data.frame(ggplot2::mpg)
dim(mpg)
str(mpg)
head(mpg)
View(mpg)
ggplot2::mpg
usa
ggplot2::mpg
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
rownames(head(usa[order(usa$Illiteracy),],10))
head(usa[order(usa$Illiteracy),],10)[,"Illiteracy"]
