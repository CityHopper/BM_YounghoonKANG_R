nrow(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
source('D:/New-one/BM_YounghoonKANG_R/test191210.R', encoding = 'UTF-8', echo=TRUE)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
# 지도에 데이터 표시
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
# 지도에 풍속을 원의 크기로 표시
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, col = 'blue') +
scale_size_continuous(range=c(1,14))
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, col = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.4, col = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.4, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,30)) #원 크기 조절
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
# 지도에 관광지 이름 추가
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name, # 텍스트 이름
family = 'sans')
names <- c("용두암", '성산일출봉', '정방폭포', '중문관광단지','한라산 1100고지', '차귀도')
addr <- c('제주시 용두암길 15',
'서귀포 성산읍 성산리',
'서귀포시 동홍동 299-3',
'서귀포시 중문동 2624-1',
'서귀포시 색달동 산 1-2',
'제주시 한경면 고산리 125')
gc <- geocode(enc2utf8(addr))
gc
cen <- as.numeric(gc)
map <- get_googlemap(center = cen, # 지도 중심점 좌표
zoom = 10,
maptype = 'roadmap',
marker = gc)
ggmap(map)
# 관광지 명칭과 좌표값으로 DataFrame 생성
df <- data.frame(name = names, lon = gc$lon,
lat = gc$lat)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 10,
size = c(640, 640),
marker = gc)
ggmap(map)
# 지도에 관광지 이름 추가
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name, # 텍스트 이름
family = 'sans')
help(geom_text)
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name, # 텍스트 이름
family = 'sans')
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name, # 텍스트 이름
family = 'Times New Roman')
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name, # 텍스트 이름
family = '바탕')
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name, # 텍스트 이름
family = '굴림')
gmap +
geom_text(data = df,
aes(x = lon, y = lat), # 텍스트 위치
size = 5, # 텍스트 크기
label = df$name) # 텍스트 이름
# 단계 구분도
install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
dim(USArrests)
str(USArrests)
dim(USArrests)
USArrests
USArrests
dim(USArrests)
str(USArrests)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = 'state')
source('D:/New-one/BM_YounghoonKANG_R/test191209.R', encoding = 'UTF-8', echo=TRUE)
# 단계 구분도
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
head(USArrests)
crime <- rownames_to_column(USArrests, var = 'state')
crime$state <- tolower(crime$state)
str(crimje)
str(crime)
str(crime)
crime
head(crime)
library(ggplot2)
install.packages('mapproj')
library(mapproj)
library(mapproj)
state_map <- map_data('state')
source('D:/New-one/BM_YounghoonKANG_R/test191210.R', encoding = 'UTF-8', echo=TRUE)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = state_map)
str (state_map)
state_map
# http://rpubs.com/cardiomoon/222145 # 국내 지도 사용하기
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/moonBook2")
library(kormaps2014)
library(moonBook2)
library(kormaps2014)
library(moonBook2)
areacode
str(areacode)
Sys.setlocale("LC_COLLATE", "ko_KR.UTF-8")
changeCode(areacode)
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
# ggChoropleth()함수를 이용한 단계구분도 그리기
# ggChoropleth()함수를 이용한 단계구분도 그리기
ggChoropleth(korpop2,kormap2,fillvar="남자_명")
ggChoropleth(korpop3,kormap3,fillvar="주택_계_호")
ggChoropleth(korpop3,kormap3,fillvar="총인구_명",subarea=c("전라","광주"))
areacode
install.packages("extrafont")
library(extrafont)
areacode
install.packages("extrafont")
library(extrafont)
areacode
# ggplot2를 이용한 단계구분도 그리기
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
Sys.setlocale("LC_COLLATE", "ko_KR.UTF-8")
# ggplot2를 이용한 단계구분도 그리기
ggplot(korpop2,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap2,colour="black",size=0.1)+
expand_limits(x=kormap2$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
1
# ggplot2를 이용한 단계구분도 그리기
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
# ggChoropleth()함수를 이용한 단계구분도 그리기
ggChoropleth(korpop2,kormap2,fillvar="남자_명")
# ggChoropleth()함수를 이용한 Interactive plot그리기
ggChoropleth(korpop2,kormap2,fillvar="남자_명",interactive=TRUE)
library(Rtsne)
library(ggplot2)
ds <- iris[,-5]
ds # 변수가 4개니까 4차원 자료
# 차원 축소 0단계: 중복 데이터 제거
dup = which(duplicated(ds))
# 차원 축소 0단계: 중복 데이터 제거
dup = which(duplicated(ds))
dup
dup
# 차원 축소 0단계: 중복 데이터 제거
dup = which(duplicated(ds))
dup
ds # 변수가 4개니까 4차원 자료
ds <- ds[-dup,]
ds.y <- iris$Species[-dup]; ds.y
# 차원 축소 수행 t-sne 실행
tsne <- Rtsne(ds, # 차원 축소 대상 데이터셋
dim = 2, # 축소할 차원 2/3차원
perplexity = 10) # perplexity차원 축소 과정에서 데이터 샘플링을 수행: 샘플의 갯수=(대상 데이터수 / 3) 보다 작게 지정
tsne <- Rtsne(ds, dim = 2, perplexity = 10)
tsne # 차원 축소시 약간의 데이터 손실을 감수해야함
ds
# 차원 축소 결과 시각화
df.tens <- data.frame(tsne$Y) # 축소결과가 Y에 들어있다
head(df.tens)
ggplot (df.tens, aes(x = X1, y = X2, color = ds.y)) +
geom_point(size = 2)
# 관광지 명칭과 좌표값으로 DataFrame 생성 OOOOOOOOOOOOOOOOOOOOO
df <- data.frame(name = names, lon = gc$lon,
lat = gc$lat)
df
# 관광지 명칭과 좌표값으로 DataFrame 생성 OOOOOOOOOOOOOOOOOOOOO
df <- data.frame(name = names, lon = gc$lon,
lat = gc$lat)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = 'roadmap',
zoom = 10,
size = c(640, 640),
marker = gc)
ggmap(map)
# 관광지 명칭과 좌표값으로 DataFrame 생성 OOOOOOOOOOOOOOOOOOOOO
df <- data.frame(name = names, lon = gc$lon,
lat = gc$lat)
df
gc <- geocode(enc2utf8(names))
df <- data.frame(name=names, lon=gc$lon, lat=gc$lat)
df
# 단계 구분도
install.packages("ggiraphExtra")
# 단계 구분도
install.packages("ggiraphExtra")
library(ggiraphExtra)
dim(USArrests)
str(USArrests)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = 'state')
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
library(ggplot2)
library(mapproj)
state_map <- map_data('state')
state_map
str (state_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = state_map)
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
# 지도에 데이터 표시
wind
dim(wind)
# 지도에 데이터 표시
wind
# 지도에 데이터 표시
wind
dim(wind)
# 지도에 데이터 표시
wind
# 지도에 데이터 표시
wind
# 지도에 데이터 표시
wind
# 공간 시각화
# google map 사용
# 절차
# 1. R 최신 버전 설치
# 2. ggplot2 최신 버전 설치
# 3. ggmap 패키지 설치
# 4. 구글맵을 사용하기 위한 API key 획득
# 5. 구글맵을 이용한 공간 시각화 수행
# My Google maps AIP Key: AIzaSyCs0wxvwUGyb7GgWNhlNB4NdfnWh78c5Tg
library(ggmap)
# 지도에 데이터 표시
wind
# 지도에 데이터 표시
library(ggmap)
wind
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp,]
df
sp
gc
gc <- geocode(enc2utf8(addr))
# 지도 위 마커 표시
gc <- geocode(enc2utf8("제주"))
cen <- as.numeric(gc)
map <- get_googlemap(center = cen, # 지도 중심점 좌표
zoom = 15,
maptype = 'roadmap',
marker = gc)
ggmap(map)
names <- c("용두암", '성산일출봉', '정방폭포', '중문관광단지','한라산 1100고지', '차귀도')
addr <- c('제주시 용두암길 15',
'서귀포 성산읍 성산리',
'서귀포시 동홍동 299-3',
'서귀포시 중문동 2624-1',
'서귀포시 색달동 산 1-2',
'제주시 한경면 고산리 125')
gc <- geocode(enc2utf8(addr))
gc
names <- c("용두암", '성산일출봉', '정방폭포', '중문관광단지','한라산 1100고지', '차귀도')
class(names)
head(gc)
head(gc)
head(df)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14))
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
help(get_googlemap)
register_google(key = 'AIzaSyCs0wxvwUGyb7GgWNhlNB4NdfnWh78c5Tg')
gc <- geocode(enc2utf8("모투에카")) # '제주'의 위도와 경도 획득
gc
cen <- as.numeric(gc) # 경도/위도를 숫자로 변환
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
# 지도에 풍속을 원의 크기로 표시
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, color = 'navy') +
scale_size_continuous(range=c(1,14)) #원 크기 조절
#***** 필요시 설치 **
install.packages( "stringi" )
install.packages("stringi")
install.packages("stringi")
library(treemap)
GNI2014
library(tidyverse)
GNI2014
library(treemap)
GNI2014
data(GNI2014)
dim(GNI2014)
str(GNI2014)
head(GNI2014)
View(GNI2014)
treemap(GNI2014,
index = c('continent', 'iso3'), # 계층 구조
vSize = 'population', # 타일 크기
vColor= 'GNI', # 타일 컬러
type = 'value', # 타일컬러링방법
bg.labels = 'yellow', # 레이블배경색
title = "World's GNI") # 제목
# 산점도에 bubble 추가 (bubble chart) - 산점도인데 데이터 크기만큼 버블이 찍힘
symbols(st$Illiteracy, st$Murder, # 원의 x,y 좌표
circles = st$Population, # 원의 반지름
inches = 0.5, # 원크기 조절값
fg = 'white', # 원 테두리 색
bg = 'navy', # 원 바탕색
lwd = 1.5, # 원 테두리선 두께
xlab = 'rate of Illiteracy',
ylab = 'crime(murder) rate',
main = 'Illiteracy and Crime')
# 산점도에 bubble 추가 (bubble chart) - 산점도인데 데이터 크기만큼 버블이 찍힘
symbols(st$Illiteracy, st$Murder, # 원의 x,y 좌표
circles = st$Population, # 원의 반지름
inches = 0.5, # 원크기 조절값
fg = 'white', # 원 테두리 색
bg = 'navy', # 원 바탕색
lwd = 1.5, # 원 테두리선 두께
xlab = 'rate of Illiteracy',
ylab = 'crime(murder) rate',
main = 'Illiteracy and Crime')
st <- data.frame(state.x77)
st <- data.frame(st, stname = rownames(st))
treemap(st, index = c("stname"),
vSize = "Area",
vColor = 'Income',
type = 'value',
title = '미국 주별 수입')
# 산점도에 bubble 추가 (bubble chart) - 산점도인데 데이터 크기만큼 버블이 찍힘
symbols(st$Illiteracy, st$Murder, # 원의 x,y 좌표
circles = st$Population, # 원의 반지름
inches = 0.5, # 원크기 조절값
fg = 'white', # 원 테두리 색
bg = 'navy', # 원 바탕색
lwd = 1.5, # 원 테두리선 두께
xlab = 'rate of Illiteracy',
ylab = 'crime(murder) rate',
main = 'Illiteracy and Crime')
library(rJava) # 패키지 로드
library(xlsx) # 패키지 로드
library(ggplot2)
setwd("D:/New-one/BM_YounghoonKANG_R/Presentation G/191223")
inbound <- read.xlsx("제주도 전입수 2014-2018.xlsx", sheetIndex=1, encoding="UTF-8")
inbound
class(inbound)
